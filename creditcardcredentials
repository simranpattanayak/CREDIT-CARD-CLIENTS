# Import the modules.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# Load the dataset.
dataset=pd.read_csv('https://student-datasets-bucket.s3.ap-south-1.amazonaws.com/whitehat-ds-datasets/uci-credit-card-fraud/UCI_Credit_Card.csv')
dataset
# Number of rows and columns.
dataset.shape
# Check for the missing values.
dataset.isnull()
# Counts of each value in the 'EDUCATION' column. 
dataset['EDUCATION'].count()
# Check the data-type of the 'EDUCATION' column.
type(dataset["EDUCATION"])
# Replace the unwanted values in the 'EDUCATION' column. Ignore if there are none.
dataset=dataset[dataset['EDUCATION'].isnull()==False]
dataset
# Percentage of each value in the 'EDUCATION' column.
dataset.isnull().sum()*100/dataset.shape[0]
# Count plot for the 'EDUCATION' column.
import seaborn as sns
plt.figure(figsize=(21,7))
sns.countplot(x='EDUCATION',data=dataset)
plt.grid()
plt.show()
# Check the data-types of all the columns using the 'info()' function.
dataset.info()
# Counts of male and female clients.
dataset['SEX'].count
# Drop the rows containing the unwanted values. Ignore this code cell if there is/are no null or unwanted value(s).
dataset=dataset[dataset['SEX'].isnull()==False]
dataset
# Percentage of male and female clients.
dataset['SEX'].isnull().sum()*100/dataset.shape[0]
# Count plot for the gender of clients.
plt.figure(figsize=(21,7))
sns.countplot(x='SEX',data=dataset)
plt.grid()
plt.show()
# Counts of each value in the 'MARRIAGE' column.
dataset['MARRIAGE'].count()
# Replace the unwanted values in the 'MARRIAGE' column. Ignore if there are none.
dataset=dataset[dataset['MARRIAGE'].isnull()==False]
dataset
# Percentage of the values in the 'MARRIAGE' column.
dataset['MARRIAGE'].isnull().sum()*100/dataset.shape[0]
# Count plot for the 'MARRIAGE' column.
plt.figure(figsize=(21,7))
sns.countplot(x='MARRIAGE',data=dataset)
plt.grid()
plt.show()
# Counts for the repayment status in September 2005.
dataset['PAY_0'].count()
# Replace the negative values with 0. Ignore if there are none.
dataset.loc[dataset['PAY_0'] < 0, 'PAY_0'] = 0 
dataset['PAY_0'].value_counts()
# Percentages for the repayment status in September 2005.
dataset['PAY_0'].isnull().sum()*100/dataset.shape[0]
# Count plot for the repayment status in September 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='PAY_0',data=dataset)
plt.grid()
plt.show()
# Counts for the repayment status in August 2005.
dataset['PAY_2'].count()
# Percentages for the repayment status in August 2005.
dataset['PAY_2'].isnull().sum()*100/dataset.shape[0]
# Count plot for the repayment status in August 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='PAY_2',data=dataset)
plt.grid()
plt.show()
# Counts for the repayment status in July 2005.
dataset['PAY_3'].count()
# Percentages for the repayment status in July 2005.
dataset['PAY_3'].isnull().sum()*100/dataset.shape[0]
# Count plot for the repayment status in July 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='PAY_3',data=dataset)
plt.grid()
plt.show()
# Counts for the repayment status in June 2005.
dataset['PAY_4'].count()
# Percentages for the repayment status in June 2005.
dataset['PAY_4'].isnull().sum()*100/dataset.shape[0]
# Count plot for the repayment status in June 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='PAY_4',data=dataset)
plt.grid()
plt.show()
# Counts for the repayment status in May 2005.
dataset['PAY_5'].count()
# Percentages for the repayment status in May 2005.
dataset['PAY_5'].isnull().sum()*100/dataset.shape[0]
# Count plot for the repayment status in May 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='PAY_5',data=dataset)
plt.grid()
plt.show()
# Counts for the repayment status in April 2005.
dataset['PAY_6'].count()
# Percentages for the repayment status in April 2005.
dataset['PAY_6'].isnull().sum()*100/dataset.shape[0]
# Count plot for the repayment status in April 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='PAY_6',data=dataset)
plt.grid()
plt.show()
# Counts for default payment status in October 2005.
dataset['default.payment.next.month'].count()
# Percentages for default payment status in October 2005.
dataset['default.payment.next.month'].isnull().sum()*100/dataset.shape[0]
# Count plot for default payment status in October 2005.
plt.figure(figsize=(21,7))
sns.countplot(x='default.payment.next.month',data=dataset)
plt.grid()
plt.show()
# Boxplots for the bill statements.
plt.figure(figsize=(10,5))
sns.boxplot(x='PAY_0',data=dataset)
# Histograms for the bill statements.

plt.hist('PAY_0', bins = 6)
plt.show()
# Box plot for the 'AGE' column.
plt.figure(figsize=(10,5))
sns.boxplot(x='AGE',data=dataset)
# Histogram for the 'AGE' column.
plt.hist('AGE', bins = 6)
plt.show()
# Boxplot for the LIMIT_BAL column.
plt.figure(figsize=(10,5))
sns.boxplot(x='LIMIT_BAL',data=dataset)
# Histogram for the 'LIMIT_BAL' column using a function from the 'seaborn' module.
plt.hist('LIMIT_BAL', bins = 6)
plt.show()
# Histogram (having 50 bins) for the 'LIMIT_BAL' column using a function from the 'matplotlib.pyplot' module.
plt.hist('LIMIT_BAL', bins = 50)
plt.show()




